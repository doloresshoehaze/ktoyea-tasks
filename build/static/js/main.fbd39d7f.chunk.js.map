{"version":3,"sources":["images/flag.png","pages/App/index.js","pages/Theory/index.js","pages/Tasks/index.js","index.js"],"names":["App","className","src","logo","alt","to","Theory","Tasks","state","isSubmited","score","name","correctAnswer","id","type","weight","answers","text","init","this","tasks","forEach","task","reduce","p","c","setState","values","value","correctCounter","ca","includes","length","Math","ceil","topScore","initialValues","onSubmit","setSubmitting","submit","checkAnwers","handleSubmit","isSubmitting","map","index","answer","htmlFor","checked","split","replace","disabled","React","Component","ReactDOM","render","StrictMode","basename","path","document","getElementById"],"mappings":"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","file":"static/js/main.fbd39d7f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/flag.18dc6064.png\";","import logo from '../../images/flag.png';\nimport './styles.scss';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Link\n          className=\"App-link\"\n          to=\"/theory\"\n        >\n          Теория\n        </Link>\n        <Link\n          className=\"App-link\"\n          to=\"/tasks\"\n        >\n          Упражнения\n        </Link>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { Link } from 'react-router-dom';\n\nfunction Theory() {\n  return (\n    <div className=\"Theory\">\n      <h3>Женский род имен прилагательных</h3>\n      <p>Ex in in pariatur proident laborum tempor voluptate id culpa in.<br />\n         Consectetur duis fugiat enim esse occaecat dolore minim esse ullamco commodo. Id pariatur tempor dolore magna <span className=\"h-green\">enim</span> qui non ullamco. Fugiat ex aliquip velit et voluptate dolore ea do officia mollit proident esse minim ex. </p>\n      <Link\n        className=\"App-link\"\n        to=\"\"\n      >\n        На главную\n      </Link>\n    </div>\n  );\n}\n\nexport default Theory;\n","import { Formik, Field, Form } from 'formik';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.scss';\n\nclass Tasks extends React.Component {\n  state = {\n    isSubmited: false,\n    score: 0,\n  }\n\n  get tasks() {\n    return [\n      {\n        name: 'Et ullamco ad aliquip culpa excepteur amet labore nisi laboris',\n        correctAnswer: ['0', '2'],\n        id: 'first',\n        type: 'checkbox',\n        weight: 10,\n        answers: [\n          {\n            name: 'Ullamco irure quis deserunt officia est.',\n            id: '0',\n          },\n          {\n            name: 'Elit duis fugiat in cupidatat amet sint aliqua.',\n            id: '1',\n          },\n          {\n            name: 'Eu nulla irure dolore elit laboris exercitation sit do reprehenderit esse sunt voluptate.',\n            id: '2',\n          },\n          {\n            name: 'Consequat incididunt non ea commodo sint ut ad ea enim veniam cillum culpa.',\n            id: '3',\n          },\n        ]\n      },\n      {\n        name: 'Exercitation exercitation nostrud Lorem sit Lorem consectetur labore nostrud minim.',\n        correctAnswer: '2',\n        id: 'second',\n        type: 'radio',\n        weight: 20,\n        answers: [\n          {\n            name: 'Ullamco in enim ullamco et nisi voluptate sunt.',\n            id: '0',\n          },\n          {\n            name: 'Dolor voluptate duis sunt laboris culpa consequat in deserunt nisi.',\n            id: '1',\n          },\n          {\n            name: 'Esse nulla qui fugiat et nostrud cillum excepteur ea.',\n            id: '2',\n          },\n          {\n            name: 'Aliqua exercitation consequat do minim.',\n            id: '3',\n          },\n        ]\n      },\n      {\n        name: 'Elit Lorem esse veniam et minim cupidatat officia quis do aliqua commodo ex.',\n        text: 'Anim id exercitation cupidatat <input> minim consectetur officia.',\n        correctAnswer: 'answer',\n        id: 'third',\n        type: 'text',\n        weight: 70,\n      }\n    ]\n  }\n\n  get initialValues() {\n    const init = {};\n    this.tasks.forEach(task => {\n      switch (task.type) {\n        case 'checkbox':\n          init[task.id] = [];\n          break;\n        case 'radio':\n          init[task.id] = task.answers[0].id;\n          break;\n        default:\n          init[task.id] = '';\n      }\n    });\n\n    return init;\n  }\n\n  get topScore() {\n    return this.tasks.reduce((p, c) => {\n      p += c.weight;\n      return p;\n    }, 0);\n  }\n\n  submit() {\n    this.setState({ isSubmited: true });\n  }\n\n  checkAnwers(values) {\n    let score = 0;\n\n    this.tasks.forEach(task => {\n      const value = values[task.id];\n      switch (task.type) {\n        case 'checkbox': {\n          let correctCounter = 0;\n\n          task.correctAnswer.forEach(ca => {\n            if (value.includes(ca)) {\n              correctCounter += 1;\n            }\n          })\n\n          if (correctCounter === task.correctAnswer.length) {\n            score += task.weight;\n          }\n\n          break;\n        }\n        default:\n          if (task.correctAnswer === value) {\n            score += task.weight;\n          }\n      }\n    })\n\n    this.setState({ score });\n  }\n\n  render() {\n    const { isSubmited, score } = this.state;\n\n    return (\n      <div className=\"Tasks\">\n        <div className=\"tasks-wrap\">\n          <Link\n            className=\"App-link\"\n            to=\"\"\n          >\n            На главную\n          </Link>\n          {\n            isSubmited ?\n              <h2>Yor score is: {Math.ceil(score / this.topScore * 10)} points</h2> :\n              <h2>Выберите правильный вариант</h2>\n          }\n          {isSubmited ?\n            null :\n            <Formik\n              initialValues={this.initialValues}\n              onSubmit={(values, { setSubmitting }) => {\n                this.submit(values);\n                this.checkAnwers(values);\n                setSubmitting(false);\n              }}\n            >\n              {({\n                values,\n                handleSubmit,\n                isSubmitting,\n              }) => (\n                <Form className=\"form\" onSubmit={handleSubmit}>\n                  {this.tasks.map((task, index) => {\n                    switch (task.type) {\n                      case 'checkbox':\n                        return (<div key={task.id} className=\"task\">\n                          <h3>{index + 1}. {task.name}</h3>\n                          <div className=\"answers\">\n                            {task.answers.map(answer => (\n                              <label key={answer.id} className=\"answer\" htmlFor={task.id + answer.id}>\n                                <Field\n                                  name={task.id}\n                                  id={task.id + answer.id}\n                                  type=\"checkbox\"\n                                  checked={values[task.id].includes(answer.id)}\n                                  value={answer.id}></Field>\n                                {answer.name}\n                              </label>\n                            ))}\n                          </div>\n                        </div>)\n                      case 'radio':\n                        return (<div key={task.id} className=\"task\">\n                          <h3>{index + 1}. {task.name}</h3>\n                          <div className=\"answers\">\n                            {task.answers.map(answer => (\n                              <label key={answer.id} className=\"answer\" htmlFor={task.id + answer.id}>\n                                <Field name={task.id}\n                                  id={task.id + answer.id}\n                                  type=\"radio\"\n                                  checked={values[task.id] === answer.id}\n                                  value={answer.id}></Field>\n                                {answer.name}\n                              </label>\n                            ))}\n                          </div>\n                        </div>)\n                      case 'text':\n                        return (<div key={task.id} className=\"task\">\n                          <h3>{index + 1}. {task.name}</h3>\n                          <span className=\"answer-text\">\n                            {task.text.split('<input>')[0]}\n                            <div className=\"input-wrap\">\n                              <Field type=\"text\"\n                                id={task.id}\n                                value={values[task.id]}></Field>\n                              <p className=\"fake\">{task.correctAnswer.replace(/[A-Za-z]/ig, 'A')}</p>\n                            </div>\n                            {task.text.split('<input>')[1]}\n                          </span>\n                        </div>)\n                      default:\n                        return null;\n                    }\n                  })}\n                  <button type=\"submit\" className=\"button\" disabled={isSubmitting}>\n                    SUBMIT\n              </button>\n                </Form>\n              )}\n            </Formik>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tasks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './index.scss';\nimport App from './pages/App';\nimport Theory from './pages/Theory';\nimport Tasks from './pages/Tasks';\n\nconst basename = process.env.NODE_ENV === 'production' ? '/ktoyea-tasks/build/' : undefined;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={basename}>\n      <Switch>\n        <Route path='/theory'>\n          <Theory />\n        </Route>\n        <Route path='/tasks'>\n          <Tasks />\n        </Route>\n        <Route path='/'>\n          <App />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}